# coding=gbk
import pandas as pd
import torch
import numpy as np
import jieba
from sklearn.feature_extraction.text import TfidfVectorizer
raw = pd.read_csv("test_public.csv",encoding="UTF-8")
subject_dic = {"价格": 1, "内饰": 2, "配置": 3, "安全性": 4, "外观": 5, "操控": 6, "油耗": 7, "空间": 8, "舒适性": 9, "动力": 10}
standard_sub = ["价格", "内饰", "配置", "安全性", "外观", "操控", "油耗", "空间", "舒适性", "动力"]
key_words=['现金', '距离', '力度', '费用', '大灯', '测试', '关系', '行驶', '做工', '堵车', '老款', '进口', '地方', '驾驶', '视野', '城市', '家用', '钥匙', '四驱', '鹰眼', '更换', '14', '时间', '刹车片', '不错', '地区', '实用', '出风口', '需求', '白色', '油表', '区别', '时尚', '小熊', '0w20', '家庭', '降价', '不响', '东西', 'cx', '提车', '手续费', '喜欢', '18', '开过', '推荐', '停车', '车主', '静音', '人比', '减速', '5000', '低配', '操控', '里程', '气囊', '95', '尖叫', '定速', '宽敞', '启动', '玻璃', '风噪', '磨损', '实惠', '小森', '噪音', '换代', '显示', '安卓', '解决', '检查', '16', '加热', '刹车踏板', '真心', '制冷', '很大', '加满', '参考', 'xt', '宝马', '耐脏', '40', '更好', '影响', '个油', '轮胎', '角度', '后视镜', '市区', '尾翼', '平均', '平均速度', '一箱', '120', '支持', '途观', '马力', '尊贵', '落地', '够用', '手刹', '接受', '制动', '真皮', '性能', '原车', '冰雪', '增加', '儿子', '平台', '发动机', '舒适性', '棕色', '冬天', '喷漆', '原装', '内部空间', '确实', '这车', '清零', '原厂', '影像', '上下班', '没换', '汉兰达', '银色', '差速器', '手动', '19', '轮毂', '外形', 'ej', '92', '安全性', '12', '清洗', '车衣', '地图', '15', '摄像头', '4s', '屏幕', '指导价', '国道', '每次', '配置', '乘坐', '真的', '车价', '长途', '声音', '舒适', '11', '实时', '后轮', '奇骏', '车漆', '高配', '消耗', '机油', '有人', '立德', '用料', '变化', '80', '温度', '不到', '开关', '外观设计', '国产', '一分钱', '经销商', '买车', '主机', 'gla', '安全带', '维修', '贷款', '自动', 'es', '大气', '不住', '销量', '靠背', '20', '能力', '路面', '尾灯', '匀速', '熄火', '17', '百公里', '关税', '纠结', '恭喜', '现款', '效果', '平时', '排量', '豪华', '后期', '车载', '车况', '配件', '优势', '只能', '13', '档位', '操控性', '循环', '综合', '保养', '耐看', '改改', '漂亮', '不在意', 'cvt', '2w', '后排', '超车', '更新', 'q5', '山寨', '空气', '不烧', '镀铬', '积碳', 'gps', '力狮', '报价', '100', '越改越', '瞬时', '顶配', '感觉', '公路', '水平', '减震', '选择', '二手车', '轴承', '打蜡', '底盘', '起步', '图像', '导航', '万公里', '金麒麟', '爆震', 'suv', '卡钳', '变速箱', '新车', '彩屏', '省油', '2019', '价位', '庞大', '估计', 'cd', '刹车盘', '坐姿', '产品', '压缩机', '裸车', '油耗', '加装', '高德', '工作', '连接', '辅助', '动力', '昂科威', '镀晶', '座椅', '还好', '空间', '价钱', '车身', '利润', '召回', '上市', '越野', '内饰', '隔音', '30', '一代', '人大', '高速', '两个', '试试', '4s店', '不好', '优惠', '加油', '颜色', '足够', '价格', '润滑', '欧蓝德', '文件', '倒车', '市内', '合资', '油门', '转向', '空滤', '脚感', '曼牌', '发电机', '味道', '蓝牙', '路况', '朋友', '习惯', '品牌', '10', '车型', '全系', '好看', '试驾', '级别', '速度', '外观', 'fb', '音质', '比傲', '销售', '傲虎', '手机', '雷达', '时速', '发出', '简单', '美孚', '刹车油', '细节', '轴距', '听到', '急刹车', 'wd40', '添加剂', '夏天', '斯巴鲁', '肯定', '城区', '前排', '方向', '面板', '难看', '记忆', '尺寸', '后备箱', '表显', '垃圾', '界面', '刹车灯', '漏油', '系统', 'dixcel', '汽油', '合适', '库存', '日本', '护板', '控制', '胎压', '空调', '车子', '助力', '獠牙', '有没有', '满意', '情况', '主动', '加速', '滤芯', '便宜', '太小', '舒服', '车尾', '刹车', '缺点', '价格便宜', '不用', '碰撞', '菲罗多', '中控', 'rav4', '楼兰', '一点', '北京', '设计师', '好像', '汽车', '汽贸', '建议', '黑色', '优点', '电子', '均速', '机滤', 'usb', '发现', '材料', '全款', '质量', '自由', '塑料', '特别', '森林', 'crv', '性价比', '国产车', '轿车', '启停', '避震', '国内', '不行', '下降', '下坡', 'cx5', '对置', '尾门', '转速', '胶套', '指南', '新款', '感受', '楼主', '公里', '设计', '装甲', '适合', 'xv', '提升', '担心', '原因', '电动', '前脸', '异响', '音响', '希望', '功能', '全时', '私信', '方向盘', '升级', '关闭', '毛病', 'abs', '涡轮', '天窗']
temp=pd.read_csv("../tf_idf.csv",encoding="gbk")
words_tfidf = temp[key_words]
values = [[] for i in range(len(raw))]
for i in range(len(raw)):
    for j in range(1, len(subject_dic) + 1):
        v = 0
        words = jieba.lcut(raw["content"].values[i])
        for word in words:
            if (word in words_tfidf.columns.tolist()):
                v += words_tfidf[word].values[j]
        values[i].append(v)
values = pd.DataFrame(values)
values.columns = standard_sub
# values["subject"]=raw["subject"]
tf_idf=values
for i in range(len(tf_idf)):
    sum = 0
    for j in range(len(tf_idf.values[i])):
        sum += tf_idf.values[i][j]
    for j in range(len(tf_idf.values[i])):
        tf_idf.values[i][j] /= sum
threshold=0.19
print(tf_idf)
result_tfidf=[]
for i in range(len(tf_idf)):
    has=False
    for j in range(len(standard_sub)):
        if (tf_idf.values[i][j] > threshold):
            has=True
            result_tfidf.append([raw["content_id"].values[i],standard_sub[j],0,None])
    if(has==False):
        result_tfidf.append([raw["content_id"].values[i],standard_sub[0], 0, None])
result_tfidf=pd.DataFrame(result_tfidf)
result_tfidf.columns=["content_id","subject","sentiment_value","sentiment_word"]
result_tfidf["sentiment_value"]=result_tfidf["sentiment_value"].astype(int)
result_tfidf.to_csv("result_tfidf.csv",encoding="UTF-8",index=False)
